{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to geosdemo_haoyu","text":"<p>A python package for interactive mapping.</p> <ul> <li>Free software: MIT license</li> <li>Documentation: https://hniu-tamu.github.io/geosdemo_haoyu</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>TODO</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"common/","title":"common module","text":"<p>The common module contains common functions and classes used by the other modules.</p>"},{"location":"common/#geosdemo_haoyu.common.hello_world","title":"<code>hello_world()</code>","text":"<p>Prints \"Hello World!\" to the console.</p> Source code in <code>geosdemo_haoyu/common.py</code> <pre><code>def hello_world():\n\"\"\"Prints \"Hello World!\" to the console.\n    \"\"\"\n    print(\"Hello World!\")\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/hniu-tamu/geosdemo-haoyu/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>geosdemo-haoyu could always use more documentation, whether as part of the official geosdemo-haoyu docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/hniu-tamu/geosdemo-haoyu/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up geosdemo-haoyu for local development.</p> <ol> <li> <p>Fork the geosdemo-haoyu repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/geosdemo-haoyu.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv geosdemo-haoyu\n$ cd geosdemo-haoyu/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 geosdemo-haoyu tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.5, 3.6, 3.7 and 3.8, and     for PyPy. Check https://github.com/hniu-tamu/geosdemo-haoyu/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"foliumap/","title":"foliumap module","text":""},{"location":"foliumap/#geosdemo_haoyu.foliumap.Map","title":"<code> Map            (Map)         </code>","text":"<p>Create a folium map object.</p> <p>Parameters:</p> Name Type Description Default <code>folium</code> <code>_type_</code> <p>description</p> required Source code in <code>geosdemo_haoyu/foliumap.py</code> <pre><code>class Map(folium.Map):\n\"\"\"Create a folium map object.\n\n    Args:\n        folium (_type_): _description_\n    \"\"\"    \n\n    def __init__(self, center = [20, 0], zoom=2, **kwargs) -&gt; None:\n\"\"\"Creates a Map instance.\n\n        Args:\n            center (list, optional): The center of the map.\n            zoom (int, optional): The zoom level of the map.\n\n        \"\"\"\n\n        super().__init__(location=center, zoom_start=zoom, **kwargs)\n\n    def add_tile_layer(self, url, name, attribution=\"\", **kwargs):\n\"\"\"Adds a tile layer to the map.\n\n        Args:\n            name: The name of the tile layer.\n            attribution: The attribution of the tile layer.\n        \"\"\"\n\n        tile_layer = folium.TileLayer(\n            tiles = url,\n            name=name, \n            attr=attribution,\n            **kwargs\n        )\n\n        self.add_child(tile_layer)\n</code></pre>"},{"location":"foliumap/#geosdemo_haoyu.foliumap.Map.__init__","title":"<code>__init__(self, center=[20, 0], zoom=2, **kwargs)</code>  <code>special</code>","text":"<p>Creates a Map instance.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>list</code> <p>The center of the map.</p> <code>[20, 0]</code> <code>zoom</code> <code>int</code> <p>The zoom level of the map.</p> <code>2</code> Source code in <code>geosdemo_haoyu/foliumap.py</code> <pre><code>def __init__(self, center = [20, 0], zoom=2, **kwargs) -&gt; None:\n\"\"\"Creates a Map instance.\n\n    Args:\n        center (list, optional): The center of the map.\n        zoom (int, optional): The zoom level of the map.\n\n    \"\"\"\n\n    super().__init__(location=center, zoom_start=zoom, **kwargs)\n</code></pre>"},{"location":"foliumap/#geosdemo_haoyu.foliumap.Map.add_tile_layer","title":"<code>add_tile_layer(self, url, name, attribution='', **kwargs)</code>","text":"<p>Adds a tile layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <p>The name of the tile layer.</p> required <code>attribution</code> <p>The attribution of the tile layer.</p> <code>''</code> Source code in <code>geosdemo_haoyu/foliumap.py</code> <pre><code>def add_tile_layer(self, url, name, attribution=\"\", **kwargs):\n\"\"\"Adds a tile layer to the map.\n\n    Args:\n        name: The name of the tile layer.\n        attribution: The attribution of the tile layer.\n    \"\"\"\n\n    tile_layer = folium.TileLayer(\n        tiles = url,\n        name=name, \n        attr=attribution,\n        **kwargs\n    )\n\n    self.add_child(tile_layer)\n</code></pre>"},{"location":"geosdemo_haoyu/","title":"geosdemo_haoyu module","text":"<p>Main module.</p>"},{"location":"geosdemo_haoyu/#geosdemo_haoyu.geosdemo_haoyu.Map","title":"<code> Map            (Map)         </code>","text":"Source code in <code>geosdemo_haoyu/geosdemo_haoyu.py</code> <pre><code>class Map(ipyleaflet.Map):\n\n    def __init__(self, center, zoom, **kwargs) -&gt; None:\n\"\"\"Creates a Map instance.\"\"\"\n\n        if \"scroll_wheel_zoom\" not in kwargs:\n            kwargs[\"scroll_wheel_zoom\"] = True\n        super().__init__(center=center, zoom=zoom, **kwargs)\n\n        if \"layers_control\" not in kwargs:\n            kwargs[\"layers_control\"] = True\n        if kwargs[\"layers_control\"]:\n            self.add_layers_control()\n\n        if \"fullscreen_control\" not in kwargs:\n            kwargs[\"fullscreen_control\"] = True\n\n        if kwargs[\"fullscreen_control\"]:\n            self.add_fullscreen_control()\n\n    def add_search_control(self, position = \"topleft\", **kwargs):\n\"\"\"Adds a search control to the map.\n\n        Args:\n            kwargs: The keyword arguments of ipyleaflet.SearchControl.\n        \"\"\"\n\n        if \"url\" not in kwargs:\n            kwargs[\"url\"] = \"https://nominatim.openstreetmap.org/search?format=json&amp;q={s}\"\n\n\n        search_control = ipyleaflet.SearchControl(position=position, **kwargs)\n        self.add_control(search_control)\n\n    def add_draw_control(self, position = \"topleft\", **kwargs):\n\"\"\"Adds a draw control to the map.\n\n        Args: Keyword arguments to pass to the draw control.\n        \"\"\"\n\n        if \"edit\" not in kwargs:\n            kwargs[\"edit\"] = True\n\n        draw_control = ipyleaflet.DrawControl(position=position, **kwargs)\n        draw_control.polyline =  {\n            \"shapeOptions\": {\n                \"color\": \"#6bc2e5\",\n                \"weight\": 8,\n                \"opacity\": 1.0\n            }\n        }\n        draw_control.polygon = {\n            \"shapeOptions\": {\n                \"fillColor\": \"#6be5c3\",\n                \"color\": \"#6be5c3\",\n                \"fillOpacity\": 1.0\n            },\n            \"drawError\": {\n                \"color\": \"#dd253b\",\n                \"message\": \"Oups!\"\n            },\n            \"allowIntersection\": False\n        }\n        draw_control.circle = {\n            \"shapeOptions\": {\n                \"fillColor\": \"#efed69\",\n                \"color\": \"#efed69\",\n                \"fillOpacity\": 1.0\n            }\n        }\n        draw_control.rectangle = {\n            \"shapeOptions\": {\n                \"fillColor\": \"#fca45d\",\n                \"color\": \"#fca45d\",\n                \"fillOpacity\": 1.0\n            }\n        }\n\n        self.add_control(draw_control)\n\n\n    def add_layers_control(self, position = \"topright\"):\n\"\"\"Adds a layers control to the map.\n\n        Args: Keyword arguments to pass to the layers control.\n        \"\"\"\n\n        layers_control = ipyleaflet.LayersControl(position=position)\n        self.add_control(layers_control)\n\n    def add_fullscreen_control(self, position = \"bottomright\"):\n\"\"\"Adds a fullscreen control to the map.\n\n        Args: Keyword arguments to pass to the fullscreen control.\n        \"\"\"\n\n        fullscreen_control = ipyleaflet.FullScreenControl(position=position)\n        self.add_control(fullscreen_control)\n\n    def add_tile_layer(self, url, name, attribution=\"\", **kwargs):\n\"\"\"Adds a tile layer to the map.\n\n        Args:\n            url (str): The tile layer URL.\n            name (str): The tile layer name.\n            attribution (str): The tile layer attribution.\n            kwargs: The keyword arguments of ipyleaflet.TileLayer.\n        \"\"\"\n\n        tile_layer = ipyleaflet.TileLayer(url=url, name=name, attribution=attribution, **kwargs)\n        self.add_layer(tile_layer)\n\n    def add_basemap(self, basemap, **kwargs):\n\"\"\"Adds a basemap to the map.\n\n        Args:\n            basemap (str): The basemap name.\n            kwargs: The keyword arguments of ipyleaflet.TileLayer.\n        \"\"\"\n        import xyzservices.providers as xyz\n\n        if basemap.lower() == \"roadmap\":\n            url = \"http://mt0.google.com/vt/lyrs=m&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}\"\n            self.add_tile_layer(url, name=basemap, **kwargs)\n        elif basemap.lower() == \"satellite\":\n            url = \"http://mt0.google.com/vt/lyrs=s&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}\"\n            self.add_tile_layer(url, name=basemap, **kwargs)\n\n        else:\n            try:\n                basemap = eval(f\"xyz.{basemap}\")\n                url = basemap.build_url()\n                attribution = basemap.attribution\n                self.add_tile_layer(url, name=basemap.name, attribution=attribution, **kwargs)\n            except:\n                raise ValueError(f\"Basemap '{basemap}' not found.\")\n\n    def add_geojson(self, data, name='GeoJSON', **kwargs):\n\"\"\"Adds a GeoJSON layer to the map.\n\n        Args:\n            data (dict): The GeoJSON data.\n            style (dict, optional): The style of the GeoJSON features. Defaults to None.\n            hover_style (dict, optional): The hover style of the GeoJSON features. Defaults to None.\n            name (str, optional): The name of the GeoJSON layer. Defaults to None.\n            kwargs: The keyword arguments of ipyleaflet.GeoJSON.\n        \"\"\"\n\n        if isinstance(data, str):\n            import json\n            with open(data, \"r\") as f:\n                data = json.load(f)\n\n        geo_json = ipyleaflet.GeoJSON(data=data, name=name, **kwargs)\n        self.add_layer(geo_json)\n\n    def add_shp(self, data, name='Shapefile', **kwargs):\n\"\"\"Adds a shapefile to the map.\n\n        Args:\n            in_shp (str): The input shapefile.\n            name (str, optional): The name of the shapefile. Defaults to 'Shapefile'.\n            kwargs: The keyword arguments of ipyleaflet.GeoData.\n        \"\"\"\n\n        import geopandas as gpd\n\n        gdf = gpd.read_file(data)\n        geojson = gdf.__geo_interface__\n        self.add_geojson(geojson, name=name, **kwargs)\n\n    def add_raster(self, url, name='Raster', fit_bounds=True, **kwargs):\n\"\"\"Adds a raster layer to the map.\n\n        Args:\n            url (str): The raster URL.\n            name (str, optional): The name of the raster layer. Defaults to 'Raster'.\n            fit_bounds (bool, optional): Whether to fit the map to the extent of the raster. Defaults to True.\n            kwargs: The keyword arguments of ipyleaflet.ImageOverlay.\n        \"\"\"\n        import httpx\n\n        titiler_endpoint = \"https://titiler.xyz\"\n\n        r = httpx.get(\n            f\"{titiler_endpoint}/cog/info\",\n            params = {\n                \"url\": url,\n            }\n        ).json()\n\n        bounds = r[\"bounds\"]\n\n        r = httpx.get(\n            f\"{titiler_endpoint}/cog/tilejson.json\",\n            params = {\n                \"url\": url,\n            }\n        ).json()\n\n        tile = r[\"tiles\"][0]\n\n        self.add_tile_layer(url=tile, name=name, **kwargs)\n\n        if fit_bounds:\n            bbox = [[bounds[1], bounds[0]], [bounds[3], bounds[2]]]\n            self.fit_bounds(bbox)\n\n    def add_local_raster(self, filename, name='Local raster', **kwargs):\n\n        try:\n            import localtileserver\n        except ImportError:\n            raise ImportError(\"Please install localtileserver to add local raster.\")\n</code></pre>"},{"location":"geosdemo_haoyu/#geosdemo_haoyu.geosdemo_haoyu.Map.__init__","title":"<code>__init__(self, center, zoom, **kwargs)</code>  <code>special</code>","text":"<p>Creates a Map instance.</p> Source code in <code>geosdemo_haoyu/geosdemo_haoyu.py</code> <pre><code>def __init__(self, center, zoom, **kwargs) -&gt; None:\n\"\"\"Creates a Map instance.\"\"\"\n\n    if \"scroll_wheel_zoom\" not in kwargs:\n        kwargs[\"scroll_wheel_zoom\"] = True\n    super().__init__(center=center, zoom=zoom, **kwargs)\n\n    if \"layers_control\" not in kwargs:\n        kwargs[\"layers_control\"] = True\n    if kwargs[\"layers_control\"]:\n        self.add_layers_control()\n\n    if \"fullscreen_control\" not in kwargs:\n        kwargs[\"fullscreen_control\"] = True\n\n    if kwargs[\"fullscreen_control\"]:\n        self.add_fullscreen_control()\n</code></pre>"},{"location":"geosdemo_haoyu/#geosdemo_haoyu.geosdemo_haoyu.Map.add_basemap","title":"<code>add_basemap(self, basemap, **kwargs)</code>","text":"<p>Adds a basemap to the map.</p> <p>Parameters:</p> Name Type Description Default <code>basemap</code> <code>str</code> <p>The basemap name.</p> required <code>kwargs</code> <p>The keyword arguments of ipyleaflet.TileLayer.</p> <code>{}</code> Source code in <code>geosdemo_haoyu/geosdemo_haoyu.py</code> <pre><code>def add_basemap(self, basemap, **kwargs):\n\"\"\"Adds a basemap to the map.\n\n    Args:\n        basemap (str): The basemap name.\n        kwargs: The keyword arguments of ipyleaflet.TileLayer.\n    \"\"\"\n    import xyzservices.providers as xyz\n\n    if basemap.lower() == \"roadmap\":\n        url = \"http://mt0.google.com/vt/lyrs=m&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}\"\n        self.add_tile_layer(url, name=basemap, **kwargs)\n    elif basemap.lower() == \"satellite\":\n        url = \"http://mt0.google.com/vt/lyrs=s&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}\"\n        self.add_tile_layer(url, name=basemap, **kwargs)\n\n    else:\n        try:\n            basemap = eval(f\"xyz.{basemap}\")\n            url = basemap.build_url()\n            attribution = basemap.attribution\n            self.add_tile_layer(url, name=basemap.name, attribution=attribution, **kwargs)\n        except:\n            raise ValueError(f\"Basemap '{basemap}' not found.\")\n</code></pre>"},{"location":"geosdemo_haoyu/#geosdemo_haoyu.geosdemo_haoyu.Map.add_draw_control","title":"<code>add_draw_control(self, position='topleft', **kwargs)</code>","text":"<p>Adds a draw control to the map.</p> <p>Args: Keyword arguments to pass to the draw control.</p> Source code in <code>geosdemo_haoyu/geosdemo_haoyu.py</code> <pre><code>def add_draw_control(self, position = \"topleft\", **kwargs):\n\"\"\"Adds a draw control to the map.\n\n    Args: Keyword arguments to pass to the draw control.\n    \"\"\"\n\n    if \"edit\" not in kwargs:\n        kwargs[\"edit\"] = True\n\n    draw_control = ipyleaflet.DrawControl(position=position, **kwargs)\n    draw_control.polyline =  {\n        \"shapeOptions\": {\n            \"color\": \"#6bc2e5\",\n            \"weight\": 8,\n            \"opacity\": 1.0\n        }\n    }\n    draw_control.polygon = {\n        \"shapeOptions\": {\n            \"fillColor\": \"#6be5c3\",\n            \"color\": \"#6be5c3\",\n            \"fillOpacity\": 1.0\n        },\n        \"drawError\": {\n            \"color\": \"#dd253b\",\n            \"message\": \"Oups!\"\n        },\n        \"allowIntersection\": False\n    }\n    draw_control.circle = {\n        \"shapeOptions\": {\n            \"fillColor\": \"#efed69\",\n            \"color\": \"#efed69\",\n            \"fillOpacity\": 1.0\n        }\n    }\n    draw_control.rectangle = {\n        \"shapeOptions\": {\n            \"fillColor\": \"#fca45d\",\n            \"color\": \"#fca45d\",\n            \"fillOpacity\": 1.0\n        }\n    }\n\n    self.add_control(draw_control)\n</code></pre>"},{"location":"geosdemo_haoyu/#geosdemo_haoyu.geosdemo_haoyu.Map.add_fullscreen_control","title":"<code>add_fullscreen_control(self, position='bottomright')</code>","text":"<p>Adds a fullscreen control to the map.</p> <p>Args: Keyword arguments to pass to the fullscreen control.</p> Source code in <code>geosdemo_haoyu/geosdemo_haoyu.py</code> <pre><code>def add_fullscreen_control(self, position = \"bottomright\"):\n\"\"\"Adds a fullscreen control to the map.\n\n    Args: Keyword arguments to pass to the fullscreen control.\n    \"\"\"\n\n    fullscreen_control = ipyleaflet.FullScreenControl(position=position)\n    self.add_control(fullscreen_control)\n</code></pre>"},{"location":"geosdemo_haoyu/#geosdemo_haoyu.geosdemo_haoyu.Map.add_geojson","title":"<code>add_geojson(self, data, name='GeoJSON', **kwargs)</code>","text":"<p>Adds a GeoJSON layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict</code> <p>The GeoJSON data.</p> required <code>style</code> <code>dict</code> <p>The style of the GeoJSON features. Defaults to None.</p> required <code>hover_style</code> <code>dict</code> <p>The hover style of the GeoJSON features. Defaults to None.</p> required <code>name</code> <code>str</code> <p>The name of the GeoJSON layer. Defaults to None.</p> <code>'GeoJSON'</code> <code>kwargs</code> <p>The keyword arguments of ipyleaflet.GeoJSON.</p> <code>{}</code> Source code in <code>geosdemo_haoyu/geosdemo_haoyu.py</code> <pre><code>def add_geojson(self, data, name='GeoJSON', **kwargs):\n\"\"\"Adds a GeoJSON layer to the map.\n\n    Args:\n        data (dict): The GeoJSON data.\n        style (dict, optional): The style of the GeoJSON features. Defaults to None.\n        hover_style (dict, optional): The hover style of the GeoJSON features. Defaults to None.\n        name (str, optional): The name of the GeoJSON layer. Defaults to None.\n        kwargs: The keyword arguments of ipyleaflet.GeoJSON.\n    \"\"\"\n\n    if isinstance(data, str):\n        import json\n        with open(data, \"r\") as f:\n            data = json.load(f)\n\n    geo_json = ipyleaflet.GeoJSON(data=data, name=name, **kwargs)\n    self.add_layer(geo_json)\n</code></pre>"},{"location":"geosdemo_haoyu/#geosdemo_haoyu.geosdemo_haoyu.Map.add_layers_control","title":"<code>add_layers_control(self, position='topright')</code>","text":"<p>Adds a layers control to the map.</p> <p>Args: Keyword arguments to pass to the layers control.</p> Source code in <code>geosdemo_haoyu/geosdemo_haoyu.py</code> <pre><code>def add_layers_control(self, position = \"topright\"):\n\"\"\"Adds a layers control to the map.\n\n    Args: Keyword arguments to pass to the layers control.\n    \"\"\"\n\n    layers_control = ipyleaflet.LayersControl(position=position)\n    self.add_control(layers_control)\n</code></pre>"},{"location":"geosdemo_haoyu/#geosdemo_haoyu.geosdemo_haoyu.Map.add_raster","title":"<code>add_raster(self, url, name='Raster', fit_bounds=True, **kwargs)</code>","text":"<p>Adds a raster layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The raster URL.</p> required <code>name</code> <code>str</code> <p>The name of the raster layer. Defaults to 'Raster'.</p> <code>'Raster'</code> <code>fit_bounds</code> <code>bool</code> <p>Whether to fit the map to the extent of the raster. Defaults to True.</p> <code>True</code> <code>kwargs</code> <p>The keyword arguments of ipyleaflet.ImageOverlay.</p> <code>{}</code> Source code in <code>geosdemo_haoyu/geosdemo_haoyu.py</code> <pre><code>def add_raster(self, url, name='Raster', fit_bounds=True, **kwargs):\n\"\"\"Adds a raster layer to the map.\n\n    Args:\n        url (str): The raster URL.\n        name (str, optional): The name of the raster layer. Defaults to 'Raster'.\n        fit_bounds (bool, optional): Whether to fit the map to the extent of the raster. Defaults to True.\n        kwargs: The keyword arguments of ipyleaflet.ImageOverlay.\n    \"\"\"\n    import httpx\n\n    titiler_endpoint = \"https://titiler.xyz\"\n\n    r = httpx.get(\n        f\"{titiler_endpoint}/cog/info\",\n        params = {\n            \"url\": url,\n        }\n    ).json()\n\n    bounds = r[\"bounds\"]\n\n    r = httpx.get(\n        f\"{titiler_endpoint}/cog/tilejson.json\",\n        params = {\n            \"url\": url,\n        }\n    ).json()\n\n    tile = r[\"tiles\"][0]\n\n    self.add_tile_layer(url=tile, name=name, **kwargs)\n\n    if fit_bounds:\n        bbox = [[bounds[1], bounds[0]], [bounds[3], bounds[2]]]\n        self.fit_bounds(bbox)\n</code></pre>"},{"location":"geosdemo_haoyu/#geosdemo_haoyu.geosdemo_haoyu.Map.add_search_control","title":"<code>add_search_control(self, position='topleft', **kwargs)</code>","text":"<p>Adds a search control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>kwargs</code> <p>The keyword arguments of ipyleaflet.SearchControl.</p> <code>{}</code> Source code in <code>geosdemo_haoyu/geosdemo_haoyu.py</code> <pre><code>def add_search_control(self, position = \"topleft\", **kwargs):\n\"\"\"Adds a search control to the map.\n\n    Args:\n        kwargs: The keyword arguments of ipyleaflet.SearchControl.\n    \"\"\"\n\n    if \"url\" not in kwargs:\n        kwargs[\"url\"] = \"https://nominatim.openstreetmap.org/search?format=json&amp;q={s}\"\n\n\n    search_control = ipyleaflet.SearchControl(position=position, **kwargs)\n    self.add_control(search_control)\n</code></pre>"},{"location":"geosdemo_haoyu/#geosdemo_haoyu.geosdemo_haoyu.Map.add_shp","title":"<code>add_shp(self, data, name='Shapefile', **kwargs)</code>","text":"<p>Adds a shapefile to the map.</p> <p>Parameters:</p> Name Type Description Default <code>in_shp</code> <code>str</code> <p>The input shapefile.</p> required <code>name</code> <code>str</code> <p>The name of the shapefile. Defaults to 'Shapefile'.</p> <code>'Shapefile'</code> <code>kwargs</code> <p>The keyword arguments of ipyleaflet.GeoData.</p> <code>{}</code> Source code in <code>geosdemo_haoyu/geosdemo_haoyu.py</code> <pre><code>def add_shp(self, data, name='Shapefile', **kwargs):\n\"\"\"Adds a shapefile to the map.\n\n    Args:\n        in_shp (str): The input shapefile.\n        name (str, optional): The name of the shapefile. Defaults to 'Shapefile'.\n        kwargs: The keyword arguments of ipyleaflet.GeoData.\n    \"\"\"\n\n    import geopandas as gpd\n\n    gdf = gpd.read_file(data)\n    geojson = gdf.__geo_interface__\n    self.add_geojson(geojson, name=name, **kwargs)\n</code></pre>"},{"location":"geosdemo_haoyu/#geosdemo_haoyu.geosdemo_haoyu.Map.add_tile_layer","title":"<code>add_tile_layer(self, url, name, attribution='', **kwargs)</code>","text":"<p>Adds a tile layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The tile layer URL.</p> required <code>name</code> <code>str</code> <p>The tile layer name.</p> required <code>attribution</code> <code>str</code> <p>The tile layer attribution.</p> <code>''</code> <code>kwargs</code> <p>The keyword arguments of ipyleaflet.TileLayer.</p> <code>{}</code> Source code in <code>geosdemo_haoyu/geosdemo_haoyu.py</code> <pre><code>def add_tile_layer(self, url, name, attribution=\"\", **kwargs):\n\"\"\"Adds a tile layer to the map.\n\n    Args:\n        url (str): The tile layer URL.\n        name (str): The tile layer name.\n        attribution (str): The tile layer attribution.\n        kwargs: The keyword arguments of ipyleaflet.TileLayer.\n    \"\"\"\n\n    tile_layer = ipyleaflet.TileLayer(url=url, name=name, attribution=attribution, **kwargs)\n    self.add_layer(tile_layer)\n</code></pre>"},{"location":"geosdemo_haoyu/#geosdemo_haoyu.geosdemo_haoyu.get_lucky_number","title":"<code>get_lucky_number(length=1)</code>","text":"<p>generate a random number of fixed length.</p> <p>Parameters:</p> Name Type Description Default <code>length</code> <code>int</code> <p>The length of the number. Defaults to 1.</p> <code>1</code> <p>Returns:</p> Type Description <code>int</code> <p>the random number.</p> Source code in <code>geosdemo_haoyu/geosdemo_haoyu.py</code> <pre><code>def get_lucky_number(length=1):\n\"\"\"generate a random number of fixed length.\n\n    Args:\n        length (int, optional): The length of the number. Defaults to 1.\n\n    Returns:\n        int: the random number.\n    \"\"\"    \n    result = ''.join(random.choice(string.digits) for i in range(length))\n    return int(result)\n</code></pre>"},{"location":"geosdemo_haoyu/#geosdemo_haoyu.geosdemo_haoyu.get_random_string","title":"<code>get_random_string(length=10, upper=False, digits=False)</code>","text":"<p>Generate a random string of fixed length.</p> <p>Parameters:</p> Name Type Description Default <code>length</code> <code>int</code> <p>The length of the string. Defaults to 10.</p> <code>10</code> <code>upper</code> <code>bool</code> <p>Whether to include uppercase letters. Defaults to False.</p> <code>False</code> <code>digits</code> <code>bool</code> <p>Whether to include digits. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>str</code> <p>The random string.</p> Source code in <code>geosdemo_haoyu/geosdemo_haoyu.py</code> <pre><code>def get_random_string(length=10, upper=False, digits=False):\n\"\"\"Generate a random string of fixed length.\n\n    Args:\n        length (int, optional): The length of the string. Defaults to 10.\n        upper (bool, optional): Whether to include uppercase letters. Defaults to False.\n        digits (bool, optional): Whether to include digits. Defaults to False.\n\n    Returns:\n        str: The random string.\n    \"\"\"    \n    letters = string.ascii_lowercase\n    if upper:\n        letters = letters + string.ascii_uppercase\n    if digits:\n        letters = letters + string.digits\n    print(letters)\n    return ''.join(random.choice(letters) for i in range(length))\n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install geosdemo-haoyu, run this command in your terminal:</p> <pre><code>pip install geosdemo-haoyu\n</code></pre> <p>This is the preferred method to install geosdemo-haoyu, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install geosdemo-haoyu from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/hniu-tamu/geosdemo-haoyu\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use geosdemo-haoyu in a project:</p> <pre><code>import geosdemo_haoyu\n</code></pre>"},{"location":"examples/folium/","title":"Folium","text":"In\u00a0[1]: Copied! <pre>import geosdemo_haoyu.foliumap as geosdemo\n</pre> import geosdemo_haoyu.foliumap as geosdemo In\u00a0[2]: Copied! <pre>m = geosdemo.Map(center=[40, -100], zoom=10)\n</pre> m = geosdemo.Map(center=[40, -100], zoom=10) In\u00a0[3]: Copied! <pre>url = \"https://mt0.google.com/vt/lyrs=y&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}\"\nm.add_tile_layer(url=url, name=\"Satellite\", attribution=\"Google\")\n</pre> url = \"https://mt0.google.com/vt/lyrs=y&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}\" m.add_tile_layer(url=url, name=\"Satellite\", attribution=\"Google\") In\u00a0[4]: Copied! <pre>m\n</pre> m Out[4]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/geosdemo/","title":"Geosdemo","text":"In\u00a0[1]: Copied! <pre>import geosdemo_haoyu\n</pre> import geosdemo_haoyu In\u00a0[2]: Copied! <pre>m = geosdemo_haoyu.Map(center=(40, -100), zoom=10)\nm.add_search_control(position=\"topright\")\nm.add_draw_control(position=\"topright\")\nm\n</pre> m = geosdemo_haoyu.Map(center=(40, -100), zoom=10) m.add_search_control(position=\"topright\") m.add_draw_control(position=\"topright\") m Out[2]: In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/intro/","title":"Intro","text":"In\u00a0[1]: Copied! <pre>import geosdemo_haoyu\n</pre> import geosdemo_haoyu In\u00a0[2]: Copied! <pre>geosdemo_haoyu.get_lucky_number(2)\n</pre> geosdemo_haoyu.get_lucky_number(2) Out[2]: <pre>75</pre> In\u00a0[3]: Copied! <pre>geosdemo_haoyu.get_random_string(2)\n</pre> geosdemo_haoyu.get_random_string(2) <pre>abcdefghijklmnopqrstuvwxyz\n</pre> Out[3]: <pre>'wk'</pre> In\u00a0[4]: Copied! <pre># Test\n</pre> # Test In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/ipyleaflet/","title":"Ipyleaflet","text":"In\u00a0[1]: Copied! <pre>import geosdemo_haoyu\n</pre> import geosdemo_haoyu In\u00a0[2]: Copied! <pre>m = geosdemo_haoyu.Map(center=(40, -100), zoom=4)\nm\n</pre> m = geosdemo_haoyu.Map(center=(40, -100), zoom=4) m Out[2]: In\u00a0[3]: Copied! <pre>style={\n        'opacity': 1, 'dashArray': '9', 'fillOpacity': 0.1, 'weight': 1\n    }\n</pre> style={         'opacity': 1, 'dashArray': '9', 'fillOpacity': 0.1, 'weight': 1     } In\u00a0[4]: Copied! <pre>m.add_shp(\"data/countries.zip\", name=\"Countries\", style=style)\n</pre> m.add_shp(\"data/countries.zip\", name=\"Countries\", style=style) In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[5]: Copied! <pre>m.add_geojson('data/sample.geojson', name='Coutries')\n</pre> m.add_geojson('data/sample.geojson', name='Coutries') In\u00a0[6]: Copied! <pre>import xyzservices.providers as xyz\n</pre> import xyzservices.providers as xyz In\u00a0[7]: Copied! <pre>xyz.CartoDB.keys()\n</pre> xyz.CartoDB.keys() Out[7]: <pre>dict_keys(['Positron', 'PositronNoLabels', 'PositronOnlyLabels', 'DarkMatter', 'DarkMatterNoLabels', 'DarkMatterOnlyLabels', 'Voyager', 'VoyagerNoLabels', 'VoyagerOnlyLabels', 'VoyagerLabelsUnder'])</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[8]: Copied! <pre>m.add_basemap(\"roadmap\")\n</pre> m.add_basemap(\"roadmap\") In\u00a0[9]: Copied! <pre>m.add_basemap(\"satellite\")\n</pre> m.add_basemap(\"satellite\") In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[10]: Copied! <pre>url = xyz.Esri.WorldImagery.build_url()\n</pre> url = xyz.Esri.WorldImagery.build_url() In\u00a0[11]: Copied! <pre>m.add_tile_layer(url = url, name=\"ESRI World Imagery\")\n</pre> m.add_tile_layer(url = url, name=\"ESRI World Imagery\") In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[12]: Copied! <pre>from ipyleaflet import Map, basemaps, basemap_to_tiles\n\nm = Map(center=(52.204793, 360.121558), zoom=9)\n\ndark_matter_layer = basemap_to_tiles(basemaps.CartoDB.DarkMatter)\nm.add_layer(dark_matter_layer)\nm\n</pre> from ipyleaflet import Map, basemaps, basemap_to_tiles  m = Map(center=(52.204793, 360.121558), zoom=9)  dark_matter_layer = basemap_to_tiles(basemaps.CartoDB.DarkMatter) m.add_layer(dark_matter_layer) m Out[12]: In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/raster/","title":"Raster","text":"In\u00a0[1]: Copied! <pre>import geosdemo_haoyu\n</pre> import geosdemo_haoyu In\u00a0[2]: Copied! <pre>m = geosdemo_haoyu.Map(center=(40, -100), zoom=4)\nm\n</pre> m = geosdemo_haoyu.Map(center=(40, -100), zoom=4) m Out[2]: In\u00a0[3]: Copied! <pre>url = \"https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif\"\n</pre> url = \"https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif\" In\u00a0[4]: Copied! <pre>m.add_raster(url)\n</pre> m.add_raster(url) In\u00a0[5]: Copied! <pre>url2 = \"https://github.com/opengeos/data/raw/main/raster/landsat7.tif\"\nm.add_raster(url2)\n</pre> url2 = \"https://github.com/opengeos/data/raw/main/raster/landsat7.tif\" m.add_raster(url2) In\u00a0[6]: Copied! <pre>url3 = \"https://github.com/opengeos/data/raw/main/raster/srtm90.tif\"\nm.add_raster(url3)\n</pre> url3 = \"https://github.com/opengeos/data/raw/main/raster/srtm90.tif\" m.add_raster(url3) In\u00a0[\u00a0]: Copied! <pre>\n</pre>"}]}